{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "# Project: Investigate The Movie Database (TMDb) Dataset.\n",
    "\n",
    "## Table of Contents\n",
    "<ul>\n",
    "<li><a href=\"#intro\">Introduction</a></li>\n",
    "<li><a href=\"#wrangling\">Data Wrangling</a></li>\n",
    "<li><a href=\"#eda\">Exploratory Data Analysis</a></li>\n",
    "<li><a href=\"#conclusions\">Conclusions</a></li>\n",
    "</ul>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='intro'></a>\n",
    "## Introduction\n",
    "\n",
    "> I choose the TMDb movie data set for data analysis. This data set contains information about 10,000 movies collected from The Movie Database (TMDb), including user ratings and revenue. It consist of 21 columns such as imdb_id, revenue, budget, vote_count etc.\n",
    "\n",
    "### Questions:\n",
    "- Movies that have the highest and the lowest profit ?\n",
    "- Movies got the highest and lowest budget ?\n",
    "- Movies with most and least earned revenue ?\n",
    "- Movies with the longest and shortest runtime ?\n",
    "- Which Genre Has The Highest Release Of Movies ?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing packages\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import pprint\n",
    "import matplotlib.pyplot as plt\n",
    "% matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='wrangling'></a>\n",
    "## Data Wrangling\n",
    "\n",
    ">In this section of the report, I will load in the data, check for cleanliness, and then trim and clean the dataset for analysis.\n",
    "\n",
    "\n",
    "\n",
    "### General Properties"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>imdb_id</th>\n",
       "      <th>popularity</th>\n",
       "      <th>budget</th>\n",
       "      <th>revenue</th>\n",
       "      <th>original_title</th>\n",
       "      <th>cast</th>\n",
       "      <th>homepage</th>\n",
       "      <th>director</th>\n",
       "      <th>tagline</th>\n",
       "      <th>...</th>\n",
       "      <th>overview</th>\n",
       "      <th>runtime</th>\n",
       "      <th>genres</th>\n",
       "      <th>production_companies</th>\n",
       "      <th>release_date</th>\n",
       "      <th>vote_count</th>\n",
       "      <th>vote_average</th>\n",
       "      <th>release_year</th>\n",
       "      <th>budget_adj</th>\n",
       "      <th>revenue_adj</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>135397</td>\n",
       "      <td>tt0369610</td>\n",
       "      <td>32.985763</td>\n",
       "      <td>150000000</td>\n",
       "      <td>1513528810</td>\n",
       "      <td>Jurassic World</td>\n",
       "      <td>Chris Pratt|Bryce Dallas Howard|Irrfan Khan|Vi...</td>\n",
       "      <td>http://www.jurassicworld.com/</td>\n",
       "      <td>Colin Trevorrow</td>\n",
       "      <td>The park is open.</td>\n",
       "      <td>...</td>\n",
       "      <td>Twenty-two years after the events of Jurassic ...</td>\n",
       "      <td>124</td>\n",
       "      <td>Action|Adventure|Science Fiction|Thriller</td>\n",
       "      <td>Universal Studios|Amblin Entertainment|Legenda...</td>\n",
       "      <td>6/9/15</td>\n",
       "      <td>5562</td>\n",
       "      <td>6.5</td>\n",
       "      <td>2015</td>\n",
       "      <td>1.379999e+08</td>\n",
       "      <td>1.392446e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>76341</td>\n",
       "      <td>tt1392190</td>\n",
       "      <td>28.419936</td>\n",
       "      <td>150000000</td>\n",
       "      <td>378436354</td>\n",
       "      <td>Mad Max: Fury Road</td>\n",
       "      <td>Tom Hardy|Charlize Theron|Hugh Keays-Byrne|Nic...</td>\n",
       "      <td>http://www.madmaxmovie.com/</td>\n",
       "      <td>George Miller</td>\n",
       "      <td>What a Lovely Day.</td>\n",
       "      <td>...</td>\n",
       "      <td>An apocalyptic story set in the furthest reach...</td>\n",
       "      <td>120</td>\n",
       "      <td>Action|Adventure|Science Fiction|Thriller</td>\n",
       "      <td>Village Roadshow Pictures|Kennedy Miller Produ...</td>\n",
       "      <td>5/13/15</td>\n",
       "      <td>6185</td>\n",
       "      <td>7.1</td>\n",
       "      <td>2015</td>\n",
       "      <td>1.379999e+08</td>\n",
       "      <td>3.481613e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>262500</td>\n",
       "      <td>tt2908446</td>\n",
       "      <td>13.112507</td>\n",
       "      <td>110000000</td>\n",
       "      <td>295238201</td>\n",
       "      <td>Insurgent</td>\n",
       "      <td>Shailene Woodley|Theo James|Kate Winslet|Ansel...</td>\n",
       "      <td>http://www.thedivergentseries.movie/#insurgent</td>\n",
       "      <td>Robert Schwentke</td>\n",
       "      <td>One Choice Can Destroy You</td>\n",
       "      <td>...</td>\n",
       "      <td>Beatrice Prior must confront her inner demons ...</td>\n",
       "      <td>119</td>\n",
       "      <td>Adventure|Science Fiction|Thriller</td>\n",
       "      <td>Summit Entertainment|Mandeville Films|Red Wago...</td>\n",
       "      <td>3/18/15</td>\n",
       "      <td>2480</td>\n",
       "      <td>6.3</td>\n",
       "      <td>2015</td>\n",
       "      <td>1.012000e+08</td>\n",
       "      <td>2.716190e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>140607</td>\n",
       "      <td>tt2488496</td>\n",
       "      <td>11.173104</td>\n",
       "      <td>200000000</td>\n",
       "      <td>2068178225</td>\n",
       "      <td>Star Wars: The Force Awakens</td>\n",
       "      <td>Harrison Ford|Mark Hamill|Carrie Fisher|Adam D...</td>\n",
       "      <td>http://www.starwars.com/films/star-wars-episod...</td>\n",
       "      <td>J.J. Abrams</td>\n",
       "      <td>Every generation has a story.</td>\n",
       "      <td>...</td>\n",
       "      <td>Thirty years after defeating the Galactic Empi...</td>\n",
       "      <td>136</td>\n",
       "      <td>Action|Adventure|Science Fiction|Fantasy</td>\n",
       "      <td>Lucasfilm|Truenorth Productions|Bad Robot</td>\n",
       "      <td>12/15/15</td>\n",
       "      <td>5292</td>\n",
       "      <td>7.5</td>\n",
       "      <td>2015</td>\n",
       "      <td>1.839999e+08</td>\n",
       "      <td>1.902723e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>168259</td>\n",
       "      <td>tt2820852</td>\n",
       "      <td>9.335014</td>\n",
       "      <td>190000000</td>\n",
       "      <td>1506249360</td>\n",
       "      <td>Furious 7</td>\n",
       "      <td>Vin Diesel|Paul Walker|Jason Statham|Michelle ...</td>\n",
       "      <td>http://www.furious7.com/</td>\n",
       "      <td>James Wan</td>\n",
       "      <td>Vengeance Hits Home</td>\n",
       "      <td>...</td>\n",
       "      <td>Deckard Shaw seeks revenge against Dominic Tor...</td>\n",
       "      <td>137</td>\n",
       "      <td>Action|Crime|Thriller</td>\n",
       "      <td>Universal Pictures|Original Film|Media Rights ...</td>\n",
       "      <td>4/1/15</td>\n",
       "      <td>2947</td>\n",
       "      <td>7.3</td>\n",
       "      <td>2015</td>\n",
       "      <td>1.747999e+08</td>\n",
       "      <td>1.385749e+09</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       id    imdb_id  popularity     budget     revenue  \\\n",
       "0  135397  tt0369610   32.985763  150000000  1513528810   \n",
       "1   76341  tt1392190   28.419936  150000000   378436354   \n",
       "2  262500  tt2908446   13.112507  110000000   295238201   \n",
       "3  140607  tt2488496   11.173104  200000000  2068178225   \n",
       "4  168259  tt2820852    9.335014  190000000  1506249360   \n",
       "\n",
       "                 original_title  \\\n",
       "0                Jurassic World   \n",
       "1            Mad Max: Fury Road   \n",
       "2                     Insurgent   \n",
       "3  Star Wars: The Force Awakens   \n",
       "4                     Furious 7   \n",
       "\n",
       "                                                cast  \\\n",
       "0  Chris Pratt|Bryce Dallas Howard|Irrfan Khan|Vi...   \n",
       "1  Tom Hardy|Charlize Theron|Hugh Keays-Byrne|Nic...   \n",
       "2  Shailene Woodley|Theo James|Kate Winslet|Ansel...   \n",
       "3  Harrison Ford|Mark Hamill|Carrie Fisher|Adam D...   \n",
       "4  Vin Diesel|Paul Walker|Jason Statham|Michelle ...   \n",
       "\n",
       "                                            homepage          director  \\\n",
       "0                      http://www.jurassicworld.com/   Colin Trevorrow   \n",
       "1                        http://www.madmaxmovie.com/     George Miller   \n",
       "2     http://www.thedivergentseries.movie/#insurgent  Robert Schwentke   \n",
       "3  http://www.starwars.com/films/star-wars-episod...       J.J. Abrams   \n",
       "4                           http://www.furious7.com/         James Wan   \n",
       "\n",
       "                         tagline      ...       \\\n",
       "0              The park is open.      ...        \n",
       "1             What a Lovely Day.      ...        \n",
       "2     One Choice Can Destroy You      ...        \n",
       "3  Every generation has a story.      ...        \n",
       "4            Vengeance Hits Home      ...        \n",
       "\n",
       "                                            overview runtime  \\\n",
       "0  Twenty-two years after the events of Jurassic ...     124   \n",
       "1  An apocalyptic story set in the furthest reach...     120   \n",
       "2  Beatrice Prior must confront her inner demons ...     119   \n",
       "3  Thirty years after defeating the Galactic Empi...     136   \n",
       "4  Deckard Shaw seeks revenge against Dominic Tor...     137   \n",
       "\n",
       "                                      genres  \\\n",
       "0  Action|Adventure|Science Fiction|Thriller   \n",
       "1  Action|Adventure|Science Fiction|Thriller   \n",
       "2         Adventure|Science Fiction|Thriller   \n",
       "3   Action|Adventure|Science Fiction|Fantasy   \n",
       "4                      Action|Crime|Thriller   \n",
       "\n",
       "                                production_companies release_date vote_count  \\\n",
       "0  Universal Studios|Amblin Entertainment|Legenda...       6/9/15       5562   \n",
       "1  Village Roadshow Pictures|Kennedy Miller Produ...      5/13/15       6185   \n",
       "2  Summit Entertainment|Mandeville Films|Red Wago...      3/18/15       2480   \n",
       "3          Lucasfilm|Truenorth Productions|Bad Robot     12/15/15       5292   \n",
       "4  Universal Pictures|Original Film|Media Rights ...       4/1/15       2947   \n",
       "\n",
       "   vote_average  release_year    budget_adj   revenue_adj  \n",
       "0           6.5          2015  1.379999e+08  1.392446e+09  \n",
       "1           7.1          2015  1.379999e+08  3.481613e+08  \n",
       "2           6.3          2015  1.012000e+08  2.716190e+08  \n",
       "3           7.5          2015  1.839999e+08  1.902723e+09  \n",
       "4           7.3          2015  1.747999e+08  1.385749e+09  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load your data and print out a few lines. Perform operations to inspect data\n",
    "#   types and look for instances of missing or possibly errant data.\n",
    "\n",
    "df = pd.read_csv('tmdb-movies.csv')\n",
    "\n",
    "#Print the first rows of tmdb-movies database\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> **Dataset Observation**: \n",
    "-\tSome Missing value.\n",
    "-\tSome data of budget and revenue are (0).\n",
    "-\tNo unit currency used in Dataset. I will assume the currency unit is the dollar.\n",
    "-\tSome columns contain multiple values separated by pipe (|) characters.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10866, 21)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Number of samples & columns in the dataset, finding 10,866 movies, and 21 columns of information.\n",
    "df.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Duplicate rows in the dataset, There is only 1 duplicated row and I will drop it.\n",
    "sum(df.duplicated())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                        int64\n",
       "imdb_id                  object\n",
       "popularity              float64\n",
       "budget                    int64\n",
       "revenue                   int64\n",
       "original_title           object\n",
       "cast                     object\n",
       "homepage                 object\n",
       "director                 object\n",
       "tagline                  object\n",
       "keywords                 object\n",
       "overview                 object\n",
       "runtime                   int64\n",
       "genres                   object\n",
       "production_companies     object\n",
       "release_date             object\n",
       "vote_count                int64\n",
       "vote_average            float64\n",
       "release_year              int64\n",
       "budget_adj              float64\n",
       "revenue_adj             float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# return the datatypes of the columns\n",
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                         0\n",
       "imdb_id                   10\n",
       "popularity                 0\n",
       "budget                     0\n",
       "revenue                    0\n",
       "original_title             0\n",
       "cast                      76\n",
       "homepage                7930\n",
       "director                  44\n",
       "tagline                 2824\n",
       "keywords                1493\n",
       "overview                   4\n",
       "runtime                    0\n",
       "genres                    23\n",
       "production_companies    1030\n",
       "release_date               0\n",
       "vote_count                 0\n",
       "vote_average               0\n",
       "release_year               0\n",
       "budget_adj                 0\n",
       "revenue_adj                0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# return missing values in the dataset\n",
    "df.isnull().sum()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                      10865\n",
       "imdb_id                 10855\n",
       "popularity              10814\n",
       "budget                    557\n",
       "revenue                  4702\n",
       "original_title          10571\n",
       "cast                    10719\n",
       "homepage                 2896\n",
       "director                 5067\n",
       "tagline                  7997\n",
       "keywords                 8804\n",
       "overview                10847\n",
       "runtime                   247\n",
       "genres                   2039\n",
       "production_companies     7445\n",
       "release_date             5909\n",
       "vote_count               1289\n",
       "vote_average               72\n",
       "release_year               56\n",
       "budget_adj               2614\n",
       "revenue_adj              4840\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Number of unique values for each column\n",
    "df.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8874"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Number of rows with missing values in the dataset \n",
    "df.isnull().any(axis=1).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>popularity</th>\n",
       "      <th>budget</th>\n",
       "      <th>revenue</th>\n",
       "      <th>runtime</th>\n",
       "      <th>vote_count</th>\n",
       "      <th>vote_average</th>\n",
       "      <th>release_year</th>\n",
       "      <th>budget_adj</th>\n",
       "      <th>revenue_adj</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>10866.000000</td>\n",
       "      <td>10866.000000</td>\n",
       "      <td>1.086600e+04</td>\n",
       "      <td>1.086600e+04</td>\n",
       "      <td>10866.000000</td>\n",
       "      <td>10866.000000</td>\n",
       "      <td>10866.000000</td>\n",
       "      <td>10866.000000</td>\n",
       "      <td>1.086600e+04</td>\n",
       "      <td>1.086600e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>66064.177434</td>\n",
       "      <td>0.646441</td>\n",
       "      <td>1.462570e+07</td>\n",
       "      <td>3.982332e+07</td>\n",
       "      <td>102.070863</td>\n",
       "      <td>217.389748</td>\n",
       "      <td>5.974922</td>\n",
       "      <td>2001.322658</td>\n",
       "      <td>1.755104e+07</td>\n",
       "      <td>5.136436e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>92130.136561</td>\n",
       "      <td>1.000185</td>\n",
       "      <td>3.091321e+07</td>\n",
       "      <td>1.170035e+08</td>\n",
       "      <td>31.381405</td>\n",
       "      <td>575.619058</td>\n",
       "      <td>0.935142</td>\n",
       "      <td>12.812941</td>\n",
       "      <td>3.430616e+07</td>\n",
       "      <td>1.446325e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.000065</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>1960.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>10596.250000</td>\n",
       "      <td>0.207583</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>17.000000</td>\n",
       "      <td>5.400000</td>\n",
       "      <td>1995.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>20669.000000</td>\n",
       "      <td>0.383856</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2006.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>75610.000000</td>\n",
       "      <td>0.713817</td>\n",
       "      <td>1.500000e+07</td>\n",
       "      <td>2.400000e+07</td>\n",
       "      <td>111.000000</td>\n",
       "      <td>145.750000</td>\n",
       "      <td>6.600000</td>\n",
       "      <td>2011.000000</td>\n",
       "      <td>2.085325e+07</td>\n",
       "      <td>3.369710e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>417859.000000</td>\n",
       "      <td>32.985763</td>\n",
       "      <td>4.250000e+08</td>\n",
       "      <td>2.781506e+09</td>\n",
       "      <td>900.000000</td>\n",
       "      <td>9767.000000</td>\n",
       "      <td>9.200000</td>\n",
       "      <td>2015.000000</td>\n",
       "      <td>4.250000e+08</td>\n",
       "      <td>2.827124e+09</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  id    popularity        budget       revenue       runtime  \\\n",
       "count   10866.000000  10866.000000  1.086600e+04  1.086600e+04  10866.000000   \n",
       "mean    66064.177434      0.646441  1.462570e+07  3.982332e+07    102.070863   \n",
       "std     92130.136561      1.000185  3.091321e+07  1.170035e+08     31.381405   \n",
       "min         5.000000      0.000065  0.000000e+00  0.000000e+00      0.000000   \n",
       "25%     10596.250000      0.207583  0.000000e+00  0.000000e+00     90.000000   \n",
       "50%     20669.000000      0.383856  0.000000e+00  0.000000e+00     99.000000   \n",
       "75%     75610.000000      0.713817  1.500000e+07  2.400000e+07    111.000000   \n",
       "max    417859.000000     32.985763  4.250000e+08  2.781506e+09    900.000000   \n",
       "\n",
       "         vote_count  vote_average  release_year    budget_adj   revenue_adj  \n",
       "count  10866.000000  10866.000000  10866.000000  1.086600e+04  1.086600e+04  \n",
       "mean     217.389748      5.974922   2001.322658  1.755104e+07  5.136436e+07  \n",
       "std      575.619058      0.935142     12.812941  3.430616e+07  1.446325e+08  \n",
       "min       10.000000      1.500000   1960.000000  0.000000e+00  0.000000e+00  \n",
       "25%       17.000000      5.400000   1995.000000  0.000000e+00  0.000000e+00  \n",
       "50%       38.000000      6.000000   2006.000000  0.000000e+00  0.000000e+00  \n",
       "75%      145.750000      6.600000   2011.000000  2.085325e+07  3.369710e+07  \n",
       "max     9767.000000      9.200000   2015.000000  4.250000e+08  2.827124e+09  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Descriptive statistics for the dataset\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f44d578f860>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize the data by the column\n",
    "df.hist(figsize = (10,10));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Cleaning"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Drop the columns that are not useful for this analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "#deleting the columns\n",
    "df.drop(['id', 'imdb_id', 'popularity', 'budget_adj', 'revenue_adj', 'homepage', 'keywords', 'overview', 'production_companies', 'vote_count', 'vote_average'], axis=1, inplace=True)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['budget', 'revenue', 'original_title', 'cast', 'director', 'tagline',\n",
       "       'runtime', 'genres', 'release_date', 'release_year'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# confirm changes\n",
    "df.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Delete any duplicate rows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Drop the duplicates\n",
    "df.drop_duplicates(inplace = True)\n",
    "\n",
    "#Check that there are no duplicates\n",
    "sum(df.duplicated())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Removing zero value from budget and the revenue columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Removing zero value from budget and the revenue columns\n",
    "# creating a list\n",
    "list1 =['budget', 'revenue']\n",
    "\n",
    "# replace the value from '0' to NAN in the list\n",
    "df[list1] = df[list1].replace(0, np.NAN)\n",
    "\n",
    "#Removing all the row which has NaN value in temp_list \n",
    "df.dropna(subset = list1, inplace = True)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>budget</th>\n",
       "      <th>revenue</th>\n",
       "      <th>runtime</th>\n",
       "      <th>release_year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>3.854000e+03</td>\n",
       "      <td>3.854000e+03</td>\n",
       "      <td>3854.000000</td>\n",
       "      <td>3854.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>3.720370e+07</td>\n",
       "      <td>1.076866e+08</td>\n",
       "      <td>109.220291</td>\n",
       "      <td>2001.261028</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>4.220822e+07</td>\n",
       "      <td>1.765393e+08</td>\n",
       "      <td>19.922820</td>\n",
       "      <td>11.282575</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>2.000000e+00</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>1960.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.000000e+07</td>\n",
       "      <td>1.360003e+07</td>\n",
       "      <td>95.000000</td>\n",
       "      <td>1995.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.400000e+07</td>\n",
       "      <td>4.480000e+07</td>\n",
       "      <td>106.000000</td>\n",
       "      <td>2004.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>5.000000e+07</td>\n",
       "      <td>1.242125e+08</td>\n",
       "      <td>119.000000</td>\n",
       "      <td>2010.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>4.250000e+08</td>\n",
       "      <td>2.781506e+09</td>\n",
       "      <td>338.000000</td>\n",
       "      <td>2015.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             budget       revenue      runtime  release_year\n",
       "count  3.854000e+03  3.854000e+03  3854.000000   3854.000000\n",
       "mean   3.720370e+07  1.076866e+08   109.220291   2001.261028\n",
       "std    4.220822e+07  1.765393e+08    19.922820     11.282575\n",
       "min    1.000000e+00  2.000000e+00    15.000000   1960.000000\n",
       "25%    1.000000e+07  1.360003e+07    95.000000   1995.000000\n",
       "50%    2.400000e+07  4.480000e+07   106.000000   2004.000000\n",
       "75%    5.000000e+07  1.242125e+08   119.000000   2010.000000\n",
       "max    4.250000e+08  2.781506e+09   338.000000   2015.000000"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TO Confirm\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Replacing zero with NAN in runtime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Replacing zero with NAN in runtime\n",
    "df['runtime'] =df['runtime'].replace(0, np.NAN)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Convert release_date column to Date datatype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "budget                   float64\n",
       "revenue                  float64\n",
       "original_title            object\n",
       "cast                      object\n",
       "director                  object\n",
       "tagline                   object\n",
       "runtime                    int64\n",
       "genres                    object\n",
       "release_date      datetime64[ns]\n",
       "release_year               int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['release_date'] = pd.to_datetime(df['release_date'])\n",
    "\n",
    "#printing the change\n",
    "df.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### changing data type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "budget                     int64\n",
       "revenue                    int64\n",
       "original_title            object\n",
       "cast                      object\n",
       "director                  object\n",
       "tagline                   object\n",
       "runtime                    int64\n",
       "genres                    object\n",
       "release_date      datetime64[ns]\n",
       "release_year               int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#changing data type of budget and revenue from float64 to int64\n",
    "change =['budget', 'revenue']\n",
    "#changing data type\n",
    "df[change]=df[change].applymap(np.int64)\n",
    "#confirm changes\n",
    "df.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Insert a new column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>budget</th>\n",
       "      <th>revenue</th>\n",
       "      <th>original_title</th>\n",
       "      <th>cast</th>\n",
       "      <th>director</th>\n",
       "      <th>tagline</th>\n",
       "      <th>runtime</th>\n",
       "      <th>genres</th>\n",
       "      <th>release_date</th>\n",
       "      <th>release_year</th>\n",
       "      <th>profit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>150000000</td>\n",
       "      <td>1513528810</td>\n",
       "      <td>Jurassic World</td>\n",
       "      <td>Chris Pratt|Bryce Dallas Howard|Irrfan Khan|Vi...</td>\n",
       "      <td>Colin Trevorrow</td>\n",
       "      <td>The park is open.</td>\n",
       "      <td>124</td>\n",
       "      <td>Action|Adventure|Science Fiction|Thriller</td>\n",
       "      <td>2015-06-09</td>\n",
       "      <td>2015</td>\n",
       "      <td>1363528810</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      budget     revenue  original_title  \\\n",
       "0  150000000  1513528810  Jurassic World   \n",
       "\n",
       "                                                cast         director  \\\n",
       "0  Chris Pratt|Bryce Dallas Howard|Irrfan Khan|Vi...  Colin Trevorrow   \n",
       "\n",
       "             tagline  runtime                                     genres  \\\n",
       "0  The park is open.      124  Action|Adventure|Science Fiction|Thriller   \n",
       "\n",
       "  release_date  release_year      profit  \n",
       "0   2015-06-09          2015  1363528810  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Insert a new column for calculating profit\n",
    "df['profit'] = df['revenue'] - df['budget']\n",
    "#To check\n",
    "df.head(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='eda'></a>\n",
    "## Exploratory Data Analysis\n",
    "\n",
    "\n",
    "### Research Question 1:  Movies that have the highest and the lowest profit ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1386</th>\n",
       "      <th>2244</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>budget</th>\n",
       "      <td>237000000</td>\n",
       "      <td>425000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>revenue</th>\n",
       "      <td>2781505847</td>\n",
       "      <td>11087569</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>original_title</th>\n",
       "      <td>Avatar</td>\n",
       "      <td>The Warrior's Way</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cast</th>\n",
       "      <td>Sam Worthington|Zoe Saldana|Sigourney Weaver|S...</td>\n",
       "      <td>Kate Bosworth|Jang Dong-gun|Geoffrey Rush|Dann...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>director</th>\n",
       "      <td>James Cameron</td>\n",
       "      <td>Sngmoo Lee</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tagline</th>\n",
       "      <td>Enter the World of Pandora.</td>\n",
       "      <td>Assassin. Hero. Legend.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>runtime</th>\n",
       "      <td>162</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>genres</th>\n",
       "      <td>Action|Adventure|Fantasy|Science Fiction</td>\n",
       "      <td>Adventure|Fantasy|Action|Western|Thriller</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>release_date</th>\n",
       "      <td>2009-12-10 00:00:00</td>\n",
       "      <td>2010-12-02 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>release_year</th>\n",
       "      <td>2009</td>\n",
       "      <td>2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>profit</th>\n",
       "      <td>2544505847</td>\n",
       "      <td>-413912431</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                             1386  \\\n",
       "budget                                                  237000000   \n",
       "revenue                                                2781505847   \n",
       "original_title                                             Avatar   \n",
       "cast            Sam Worthington|Zoe Saldana|Sigourney Weaver|S...   \n",
       "director                                            James Cameron   \n",
       "tagline                               Enter the World of Pandora.   \n",
       "runtime                                                       162   \n",
       "genres                   Action|Adventure|Fantasy|Science Fiction   \n",
       "release_date                                  2009-12-10 00:00:00   \n",
       "release_year                                                 2009   \n",
       "profit                                                 2544505847   \n",
       "\n",
       "                                                             2244  \n",
       "budget                                                  425000000  \n",
       "revenue                                                  11087569  \n",
       "original_title                                  The Warrior's Way  \n",
       "cast            Kate Bosworth|Jang Dong-gun|Geoffrey Rush|Dann...  \n",
       "director                                               Sngmoo Lee  \n",
       "tagline                                   Assassin. Hero. Legend.  \n",
       "runtime                                                       100  \n",
       "genres                  Adventure|Fantasy|Action|Western|Thriller  \n",
       "release_date                                  2010-12-02 00:00:00  \n",
       "release_year                                                 2010  \n",
       "profit                                                 -413912431  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate highest and lowest value\n",
    "def calculate (col):\n",
    "    # calculate highest value\n",
    "    highest = df[col].idxmax()\n",
    "    highest_details = pd.DataFrame(df.loc[highest])\n",
    "    \n",
    "    # calculate lowest value\n",
    "    lowest = df[col].idxmin()\n",
    "    lowest_details = pd.DataFrame(df.loc[lowest])  \n",
    "    \n",
    "    # Put them together in one table\n",
    "    info = pd.concat([highest_details, lowest_details], axis=1)\n",
    "    \n",
    "    return info\n",
    "\n",
    "# Calculate the Highest and lowest profits for a movie\n",
    "\n",
    "calculate ('profit')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- According to the following table, the highest profit movie Avatar made a profit of 254,450,5847 dollars.\n",
    "- And the movie 'The Warrior's Way' make a lost by more than 400 Million dollars."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Research Question 2: Movies got the highest and lowest budget ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>2244</th>\n",
       "      <th>2618</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>budget</th>\n",
       "      <td>425000000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>revenue</th>\n",
       "      <td>11087569</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>original_title</th>\n",
       "      <td>The Warrior's Way</td>\n",
       "      <td>Lost &amp; Found</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cast</th>\n",
       "      <td>Kate Bosworth|Jang Dong-gun|Geoffrey Rush|Dann...</td>\n",
       "      <td>David Spade|Sophie Marceau|Ever Carradine|Step...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>director</th>\n",
       "      <td>Sngmoo Lee</td>\n",
       "      <td>Jeff Pollack</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tagline</th>\n",
       "      <td>Assassin. Hero. Legend.</td>\n",
       "      <td>A comedy about a guy who would do anything to ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>runtime</th>\n",
       "      <td>100</td>\n",
       "      <td>95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>genres</th>\n",
       "      <td>Adventure|Fantasy|Action|Western|Thriller</td>\n",
       "      <td>Comedy|Romance</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>release_date</th>\n",
       "      <td>2010-12-02 00:00:00</td>\n",
       "      <td>1999-04-23 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>release_year</th>\n",
       "      <td>2010</td>\n",
       "      <td>1999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>profit</th>\n",
       "      <td>-413912431</td>\n",
       "      <td>99</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                             2244  \\\n",
       "budget                                                  425000000   \n",
       "revenue                                                  11087569   \n",
       "original_title                                  The Warrior's Way   \n",
       "cast            Kate Bosworth|Jang Dong-gun|Geoffrey Rush|Dann...   \n",
       "director                                               Sngmoo Lee   \n",
       "tagline                                   Assassin. Hero. Legend.   \n",
       "runtime                                                       100   \n",
       "genres                  Adventure|Fantasy|Action|Western|Thriller   \n",
       "release_date                                  2010-12-02 00:00:00   \n",
       "release_year                                                 2010   \n",
       "profit                                                 -413912431   \n",
       "\n",
       "                                                             2618  \n",
       "budget                                                          1  \n",
       "revenue                                                       100  \n",
       "original_title                                       Lost & Found  \n",
       "cast            David Spade|Sophie Marceau|Ever Carradine|Step...  \n",
       "director                                             Jeff Pollack  \n",
       "tagline         A comedy about a guy who would do anything to ...  \n",
       "runtime                                                        95  \n",
       "genres                                             Comedy|Romance  \n",
       "release_date                                  1999-04-23 00:00:00  \n",
       "release_year                                                 1999  \n",
       "profit                                                         99  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#calculate the highest and lowest budget \n",
    "calculate('budget')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- The Warrior's Way movie has the highest budget more than 400 Million dollars.\n",
    "- And Lost & Found movie has the lowest budget i.e 1 dollar."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Research Question 3: Movies with most and least earned revenue ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1386</th>\n",
       "      <th>5067</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>budget</th>\n",
       "      <td>237000000</td>\n",
       "      <td>6000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>revenue</th>\n",
       "      <td>2781505847</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>original_title</th>\n",
       "      <td>Avatar</td>\n",
       "      <td>Shattered Glass</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cast</th>\n",
       "      <td>Sam Worthington|Zoe Saldana|Sigourney Weaver|S...</td>\n",
       "      <td>Hayden Christensen|Peter Sarsgaard|ChloÃƒÂ« Sevi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>director</th>\n",
       "      <td>James Cameron</td>\n",
       "      <td>Billy Ray</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tagline</th>\n",
       "      <td>Enter the World of Pandora.</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>runtime</th>\n",
       "      <td>162</td>\n",
       "      <td>94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>genres</th>\n",
       "      <td>Action|Adventure|Fantasy|Science Fiction</td>\n",
       "      <td>Drama|History</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>release_date</th>\n",
       "      <td>2009-12-10 00:00:00</td>\n",
       "      <td>2003-11-14 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>release_year</th>\n",
       "      <td>2009</td>\n",
       "      <td>2003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>profit</th>\n",
       "      <td>2544505847</td>\n",
       "      <td>-5999998</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                             1386  \\\n",
       "budget                                                  237000000   \n",
       "revenue                                                2781505847   \n",
       "original_title                                             Avatar   \n",
       "cast            Sam Worthington|Zoe Saldana|Sigourney Weaver|S...   \n",
       "director                                            James Cameron   \n",
       "tagline                               Enter the World of Pandora.   \n",
       "runtime                                                       162   \n",
       "genres                   Action|Adventure|Fantasy|Science Fiction   \n",
       "release_date                                  2009-12-10 00:00:00   \n",
       "release_year                                                 2009   \n",
       "profit                                                 2544505847   \n",
       "\n",
       "                                                             5067  \n",
       "budget                                                    6000000  \n",
       "revenue                                                         2  \n",
       "original_title                                    Shattered Glass  \n",
       "cast            Hayden Christensen|Peter Sarsgaard|ChloÃƒÂ« Sevi...  \n",
       "director                                                Billy Ray  \n",
       "tagline                                                       NaN  \n",
       "runtime                                                        94  \n",
       "genres                                              Drama|History  \n",
       "release_date                                  2003-11-14 00:00:00  \n",
       "release_year                                                 2003  \n",
       "profit                                                   -5999998  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate most and the least earned revenue\n",
    "calculate('revenue')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Avatar movie shows the most revenue earned i.e 2781505847 dollar.\n",
    "\n",
    "- Shattered Glass movie shows the least revenue earned i.e 2 dollar"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Research Question 4: Movies with the longest and shortest runtime?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>2107</th>\n",
       "      <th>5162</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>budget</th>\n",
       "      <td>18000000</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>revenue</th>\n",
       "      <td>871279</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>original_title</th>\n",
       "      <td>Carlos</td>\n",
       "      <td>Kid's Story</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cast</th>\n",
       "      <td>Edgar RamÃƒÂ­rez|Alexander Scheer|Fadi Abi Samra...</td>\n",
       "      <td>Clayton Watson|Keanu Reeves|Carrie-Anne Moss|K...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>director</th>\n",
       "      <td>Olivier Assayas</td>\n",
       "      <td>Shinichiro Watanabe</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tagline</th>\n",
       "      <td>The man who hijacked the world</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>runtime</th>\n",
       "      <td>338</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>genres</th>\n",
       "      <td>Crime|Drama|Thriller|History</td>\n",
       "      <td>Science Fiction|Animation</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>release_date</th>\n",
       "      <td>2010-05-19 00:00:00</td>\n",
       "      <td>2003-06-02 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>release_year</th>\n",
       "      <td>2010</td>\n",
       "      <td>2003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>profit</th>\n",
       "      <td>-17128721</td>\n",
       "      <td>-5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                             2107  \\\n",
       "budget                                                   18000000   \n",
       "revenue                                                    871279   \n",
       "original_title                                             Carlos   \n",
       "cast            Edgar RamÃƒÂ­rez|Alexander Scheer|Fadi Abi Samra...   \n",
       "director                                          Olivier Assayas   \n",
       "tagline                            The man who hijacked the world   \n",
       "runtime                                                       338   \n",
       "genres                               Crime|Drama|Thriller|History   \n",
       "release_date                                  2010-05-19 00:00:00   \n",
       "release_year                                                 2010   \n",
       "profit                                                  -17128721   \n",
       "\n",
       "                                                             5162  \n",
       "budget                                                         10  \n",
       "revenue                                                         5  \n",
       "original_title                                        Kid's Story  \n",
       "cast            Clayton Watson|Keanu Reeves|Carrie-Anne Moss|K...  \n",
       "director                                      Shinichiro Watanabe  \n",
       "tagline                                                       NaN  \n",
       "runtime                                                        15  \n",
       "genres                                  Science Fiction|Animation  \n",
       "release_date                                  2003-06-02 00:00:00  \n",
       "release_year                                                 2003  \n",
       "profit                                                         -5  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate the longest and shortest runtime\n",
    "calculate('runtime')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Carlos movie shows the longest runtime i.e 338 minutes\n",
    "- Kid's Story movie shows the shortest runtime i.e 15 minutes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The average movie runtime?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "109.22029060716139"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Return the average runtime\n",
    "df['runtime'].mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- The average runtime a movie is 109 minutes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f44d4d05ef0>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create box plot to see the distribution of the runtime \n",
    "plt.figure(figsize=(10,6), dpi = 105)\n",
    "\n",
    "# Use seaborn to generate the boxplot\n",
    "sns.boxplot(df['runtime'], linewidth = 2)\n",
    "# To diplay the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f44d4ca3710>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create histogram to see the distribution of the runtime\n",
    "plt.figure(figsize=(9,5), dpi = 100)\n",
    "\n",
    "# x-axis \n",
    "plt.xlabel('Runtime of the Movies', fontsize = 15)\n",
    "# y-axis\n",
    "plt.ylabel('Nos.of Movies in the Dataset', fontsize=15)\n",
    "# Name of the graph\n",
    "plt.title('Runtime of all the movies', fontsize=15)\n",
    "\n",
    "# Plot the Histogram\n",
    "plt.hist(df['runtime'], rwidth = 0.9, bins =35)\n",
    "# Displays the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- More than 6,000 of the movies are of 100+ minutes."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Research Question 5: Which Genre Has The Highest Release Of Movies?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f44d4559e10>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#split 'genres' and return the count of each genre.\n",
    "def count_genres(x):\n",
    "    #concatenate all the rows of the genrs.\n",
    "    data_plot=df[x].str.cat(sep = '|')\n",
    "    data= pd.Series(data_plot.split('|'))\n",
    "    \n",
    "    gen= data.value_counts(ascending=False)\n",
    "    return gen\n",
    "\n",
    "#counting the movies for each genre\n",
    "total= count_genres('genres')\n",
    "total=total.plot(kind= 'bar',figsize = (13,8),fontsize=8)\n",
    "\n",
    "total.set_title(\"Genres with Highest Number of Release\",fontsize=15)\n",
    "total.set_xlabel(\"Genres\",fontsize=12)\n",
    "total.set_ylabel(\"Number Of Released Movies\",fontsize= 12)\n",
    "sns.set_style(\"whitegrid\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the above Bar chart, we can observe that Drama genre has the highest release of movies more than 1600 released movies, then Comedy genre more than 1200 movies."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='conclusions'></a>\n",
    "## Conclusions\n",
    "- Most popular genre: Drama, Comedy, and Thriller.\n",
    "- Average duration of the movie must be 109 minutes.\n",
    "- Movie that made highest revenue is Avatar.\n",
    "- Movie with highest budget is The Warrior's Way.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Limitations:\n",
    "\n",
    "- In data wrangling process, particularly in 'genres' columns there were more than one genre in the same row for each movie so I used '|' to split the data in data exploring step.\n",
    "\n",
    "- This analysis may not be 100% accurate due to null values and zero values, but all data cleaning have been performed to ensure the data is as clean and complete as possible."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from subprocess import call\n",
    "call(['python', '-m', 'nbconvert', 'Investigate_a_Dataset.ipynb'])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
